//! `ships` defines ships, their construction and modification.
//!
//! #Last Modified
//!
//! Author: Daniel Bechaz</br>
//! Date: 2017/10/29

use game::*;
use super::{ShipSize, Mass};
use super::weapons::*;
use std::rc::Rc;

pub type FuelUnit = UInt;
pub type HullPoint = UInt;
pub type ShieldPoint = UInt;

#[derive(Debug, PartialEq, Eq, Clone)]
/// `ShipTemplate` is a representation of a type of Ship.
pub struct ShipTemplate {
    /// The size class of this Ship type.
    pub ship_size_class: ShipSize,
    /// The maximum units of fuel carried by this Ship type.
    pub fuel_capacity: FuelUnit,
    /// The number of units of fuel used by this Ship type in one period.
    pub fuel_use: FuelUnit,
    /// The maximum hull points (health points) of this Ship type.
    pub max_hull: HullPoint,
    /// The maximum shield points of this Ship type.
    pub shield_capacity: ShieldPoint,
    /// The number of shield points regenerated by this Ship type in one period.
    pub shield_recovery: ShieldPoint,
    /// The maximum units of Mass this Ship type can transport.
    pub cargo_capacity: Mass,
    /// The summed offensive weapons mounted on this Ship type.
    pub offence_weapons: ReducedWeapon,
    /// The summed defensive weapons mounted on this Ship type.
    pub defence_weapons: ReducedWeapon
}

impl ShipTemplate {
    /// Returns a new `ShipTemplate` built from raw parts.
    ///
    /// #Params
    ///
    /// ship_size_class --- The size class of this Ship type.
    /// fuel_capacity --- The maximum units of fuel carried by this Ship type.
    /// fuel_use --- The number of units of fuel used by this Ship type in one period.
    /// defence_rating --- The percentage of attacks which this Ship type evades or absorbs without consequence.
    /// hull_points --- The maximum hull points (health points) of this Ship type.
    /// shield_points --- The maximum shield points of this Ship type.
    /// shield_recovery --- The number of shield points regenerated by this Ship type in one period.
    /// cargo_capacity --- The maximum units of Mass this Ship type can transport.
    /// offence_weapons --- The number and types of offensive weapon mounted on this Ship type.
    /// defence_weapons --- The number and types of defensive weapon mounted on this Ship type.
    pub unsafe fn from_parts(ship_size_class: ShipSize, fuel_capacity: UInt,
        fuel_use: UInt, max_hull: UInt, shield_capacity: UInt, shield_recovery: UInt,
        cargo_capacity: Mass, offence_weapons: ReducedWeapon,
        defence_weapons: ReducedWeapon) -> Self {
            ShipTemplate {
                ship_size_class,
                fuel_capacity,
                fuel_use,
                max_hull,
                shield_capacity,
                shield_recovery,
                cargo_capacity,
                offence_weapons,
                defence_weapons
            }
        }
    /// Attempts to call `ShipTemplate::from_parts` if parameters pass checks to guarentee:
    /// * fuel_use <= fuel_capacity
    /// * shield_recovery <= shield_points
    /// Any errors when performing these checks are returned as a `ShieldError`.
    ///
    /// #Params
    ///
    /// Refer to `ShipTemplate::from_parts` for parameters.
    pub fn new(ship_size_class: ShipSize, fuel_capacity: UInt, fuel_use: UInt,
        hull_points: UInt, shield_points: UInt, shield_recovery: UInt,
        cargo_capacity: Mass, offence_weapons: ReducedWeapon,
        defence_weapons: ReducedWeapon) -> Result<Self, ShipError> {
        //Check that fuel use is not greater than fuel capacity.
        if fuel_use > fuel_capacity {
            Err(
                ShipError::FuelError(
                    fuel_use,
                    fuel_capacity
                )
            )
        //Check that shield_recovery is not greater than shield capacity
        } else if shield_recovery > shield_points {
            Err(
                ShipError::ShieldError(
                    shield_recovery,
                    shield_points
                )
            )
        //All checks passed, parameters are valid.
        } else {
            Ok(
                unsafe {
                    ShipTemplate::from_parts(
                        ship_size_class,
                        fuel_capacity,
                        fuel_use,
                        hull_points,
                        shield_points,
                        shield_recovery,
                        cargo_capacity,
                        offence_weapons,
                        defence_weapons
                    )
                }
            )
        }
    }
    /// A factory function for building `ShipTemplate` instances with currying.
    ///
    /// #Params
    ///
    /// Refer to `ShipTemplate::new` for parameters and guarentees.
    pub fn builder(ship_size_class: ShipSize) -> Box<Fn(UInt) -> Box<Fn(UInt) -> Option<Box<Fn(UInt)
        -> Box<Fn(UInt) -> Box<Fn(UInt) -> Option<Box<Fn(Mass)
        -> Box<Fn(ReducedWeapon) -> Box<Fn(ReducedWeapon) -> Box<Fn() -> Self>>>>>>>>>>> {
        Box::new(move |fuel_capacity|
            Box::new(move |fuel_use|
                //The fuel_use is not greater than the fuel capacity
                if fuel_use > fuel_capacity {
                    None
                } else {
                    Some(
                        Box::new(move |max_hull|
                            Box::new(move |shield_capacity|
                                Box::new(move |shield_recovery|
                                    //The shield_recovery is not greater than the shield capacity.
                                    if shield_recovery > shield_capacity {
                                        None
                                    } else {
                                        Some(
                                            Box::new(move |cargo_capacity|
                                                Box::new(move |offence_weapons|
                                                    Box::new(move |defence_weapons| {
                                                        let offence_weapons = offence_weapons.clone();
                                                        let defence_weapons = defence_weapons.clone();
                                                        Box::new(
                                                            move ||
                                                                unsafe {
                                                                    Self::from_parts(
                                                                        ship_size_class,
                                                                        fuel_capacity,
                                                                        fuel_use,
                                                                        max_hull,
                                                                        shield_capacity,
                                                                        shield_recovery,
                                                                        cargo_capacity,
                                                                        offence_weapons.clone(),
                                                                        defence_weapons.clone()
                                                                    )
                                                                }
                                                            )
                                                        }
                                                    )
                                                )
                                            )
                                        )
                                    }
                                )
                            )
                        )
                    )
                }
            )
        )
    }
    /// Returns true if this `Ship` can be targeted by the `TargetedDamage`.
    ///
    /// #Params
    ///
    /// attack --- The `TargetedDamage` which being checked.
    pub fn is_valid_for(&self, attack: &TargetedDamage) -> bool {
        self.ship_size_class >= attack.target_size
    }
}

impl Default for ShipTemplate {
    fn default() -> ShipTemplate {
        unsafe {
            ShipTemplate::from_parts(
                0, 0, 0, 0, 0, 0, 0,
                ReducedWeapon::default(),
                ReducedWeapon::default()
            )
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
/// `Ship` is a representation of an active instance of `ShipTemplate`.
pub struct Ship {
    /// The Ship template which this `Ship` is an instance of.
    pub template: Rc<ShipTemplate>,
    /// The units of fuel currently in this `Ship`.
    pub fuel_units: FuelUnit,
    /// The current hull points (health points) of this `Ship`.
    pub hull_points: HullPoint,
    /// The current shield points of this `Ship`.
    pub shield_points: ShieldPoint
}

impl Ship {
    /// Creates a new `Ship` built from raw parts.
    ///
    /// #Params
    ///
    /// template --- The `ShipTemplate` this `Ship` is an instance of.
    /// fuel_units --- The units of fuel this `Ship` currently has.
    /// hull_points --- The current hull points (health points) of this `Ship`.
    /// shield_points --- The current shield points of this `Ship`.
    pub unsafe fn from_parts(template: Rc<ShipTemplate>, fuel_units: FuelUnit,
        hull_points: HullPoint, shield_points: ShieldPoint) -> Self {
        Self {
            template,
            fuel_units,
            hull_points,
            shield_points
        }
    }
    /// Attempts to call `Ship::from_parts` if parameters pass checks to guarentee:
    /// * fuel_units <= template.fuel_capacity
    /// * hull_points <= template.hull_points
    /// * shield_points <= template.shield_points
    /// Any errors when performing these checks are returned as a `ShieldError`.
    ///
    /// #Params
    ///
    /// Refer to `Ship::from_parts` for parameters.
    pub fn new(template: Rc<ShipTemplate>, fuel_units: FuelUnit, hull_points: HullPoint,
        shield_points: ShieldPoint) -> Result<Self, ShipError> {
        //Check that the current fuel is not greater than the fuel capacity.
        if fuel_units > template.fuel_capacity {
            Err(
                ShipError::FuelError(fuel_units, template.fuel_capacity)
            )
        //Check that the current hull is not greater than the maximum hull.
        } else if hull_points > template.max_hull {
            Err(
                ShipError::HullError(hull_points, template.max_hull)
            )
        //Check that the current shield is not greater than the shield capacity.
        } else if shield_points > template.shield_capacity {
            Err(
                ShipError::ShieldError(shield_points, template.shield_capacity)
            )
        //All checks passed, parameters are valid.
        } else {
            unsafe {
                Ok(
                    Self::from_parts(
                        template,
                        fuel_units,
                        hull_points,
                        shield_points
                    )
                )
            }
        }
    }
    /// A factory function for building `Ship` instances with currying.
    ///
    /// #Params
    ///
    /// Refer to `Ship::new` for parameters and guarentees.
    pub fn builder(template: Rc<ShipTemplate>) -> Box<Fn(FuelUnit) -> Option<Box<Fn(HullPoint)
        -> Option<Box<Fn(ShieldPoint) -> Option<Box<Fn() -> Self>>>>>>> {
        Box::new(move |fuel_units| {
            let template = template.clone();
            //Check that current fuel is not greater than fuel capacity.
            if fuel_units > template.fuel_capacity {
                None
            } else{
                Some(
                    Box::new(move |hull_points| {
                        let template = template.clone();
                        //Check that current hull is not greater than maximum hull.
                        if hull_points > template.max_hull {
                            None
                        } else {
                            Some(
                                Box::new(move |shield_points| {
                                    let template = template.clone();
                                    //Check that current shield is not greater than shield_capacity.
                                    if shield_points > template.shield_capacity {
                                        None
                                    } else {
                                        unsafe {
                                            Some(
                                                Box::new(move || {
                                                    Self::from_parts(
                                                        template.clone(),
                                                        fuel_units,
                                                        hull_points,
                                                        shield_points
                                                    )
                                                })
                                            )
                                        }
                                    }
                                })
                            )
                        }
                    })
                )
            }
        })
    }
    /// Returns true if the `Ship` still has hull points.
    pub fn is_alive(&self) -> bool {
        self.hull_points != 0
    }
    /// Attempts to use fuel at the rate specified by the `Ship`s template. If not enough
    /// fuel is available then the current fuel and the fuel use rate are returned.
    pub fn try_use_fuel(&mut self) -> Option<(FuelUnit, FuelUnit)> {
        if self.fuel_units < self.template.fuel_use {
            Some(
                (self.fuel_units, self.template.fuel_use)
            )
        } else {
            self.fuel_units -= self.template.fuel_use;
            None
        }
    }
    /// Runs shield regeneration for the `Ship`, adding to the `Ship`s shields without
    /// exceding the shield capacity.
    pub fn regenerate_shields(&mut self) {
        self.shield_points += self.template.shield_recovery;
        if self.shield_points > self.template.shield_capacity {
            self.shield_points = self.template.shield_capacity;
        }
    }
    /// Distributes the attacks from the `Ship`s offencive weapons among the passed targets.
    ///
    /// #Params
    ///
    /// targets --- The potential targets which the damage is being distributed against.
    pub fn distribute_offense(&self, targets: &mut Vec<DistributedDamage>) {
        self.template.offence_weapons.distribute_attacks(targets)
    }
    /// Distributes the attacks from the `Ship`s defencive weapons among the passed targets.
    ///
    /// #Params
    ///
    /// targets --- The potential targets which the damage is being distributed against.
    pub fn distribute_defence(&self, targets: &mut Vec<DistributedDamage>) {
        self.template.defence_weapons.distribute_attacks(targets)
    }
    /// Applies the results of `Ship::simulate_damage` to the `Ship`.
    ///
    /// #Params
    ///
    /// damage --- The damage points being leveled against this `Ship`.
    pub fn resolve_damage(&mut self, damage: DamagePoint) -> DamagePoint {
        //Calculate the results of applying the damage.
        let (shield_points, hull_points, damage) = self.simulate_damage(damage);
        
        //Apply the results.
        self.shield_points = shield_points;
        self.hull_points = hull_points;
        damage
    }
    /// Simlulates damage dealt againt this `Ship`, dampening damage against the shields
    /// of the `Ship` first and then removing hull points. The shields, hull and damage
    /// that would remain after the damage was dealt are all returned.
    ///
    /// #Params
    ///
    /// damage --- The damage points being leveled against this `Ship`.
    pub fn simulate_damage(&self, mut damage: DamagePoint) -> (ShieldPoint, HullPoint, DamagePoint) {
        let (mut shield_points, mut hull_points) = (self.shield_points, self.hull_points);
        
        //If the damage is less than or equal to the shields then all the damage is
        //absorbed by the shield.
        if damage <= shield_points {
            shield_points -= damage;
            (shield_points, hull_points, 0)
        //If the damage is greater than the shields then the damage is dampened but some
        //still makes it through.
        } else {
            //Remove the damage absorbed by the shields.
            damage -= shield_points;
            //Empty the shields.
            shield_points = 0;
            
            //If the damage is greater than the hull points of the `Ship` then the ship
            //will die and there will be some damage to return.
            if damage > hull_points {
                //Remove the damage absorbed by the hull.
                damage -= hull_points;
                //Remove all hull.
                hull_points = 0;
                //Return the remaining damage.
                (shield_points, hull_points, damage)
            //If the damage is less than or equal to the hull then all damage will be
            //absorbed by the hull.
            } else {
                //Remove the hull points used to absorbed the damage.
                hull_points -= damage;
                (shield_points, hull_points, 0)
            }
        }
    }    
}

impl AsRef<ShipTemplate> for Ship {
    fn as_ref(&self) -> &ShipTemplate {
        &self.template
    }
}

/// An error produced if a call to `ShipTemplate::new` or `Ship::new` fails.
pub enum ShipError {
    /// Produced if:
    /// * The `ShipTemplate` would consume more fuel than it could store. :- (consumption, store)
    /// * The `Ship` would contain more fuel than it had capacity. :- (fuel, capacity)
    FuelError(UInt, UInt),
    /// Produced if:
    /// * The `ShipTemplate` would regenerate more shields than it can maintain. :- (regenerate, maintain)
    /// * The `Ship` would have more shields than it had capacity. :- (shield, capacity)
    ShieldError(UInt, UInt),
    /// Produced if the `Ship` would have more hull than its maximum. :- (hull, maximum)
    HullError(UInt, UInt)
}
